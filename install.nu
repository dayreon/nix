#!/usr/bin/env nu

let-env LANG = "ru_RU.UTF-8"

def main [] {
    print $"(ansi green_bold)üöÄ –ó–¥–æ—Ä–æ–≤–∞, –±—Ä–∞—Ç–∏—à! –ü–æ–≥–Ω–∞–ª–∏ —Å—Ç–∞–≤–∏—Ç—å NixOS!(ansi reset)"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º EFI —Ä–µ–∂–∏–º
    if not (test -d /sys/firmware/efi) {
        print $"(ansi red)‚ùå –ë—Ä–∞—Ç–∏—à, —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –≤ EFI —Ä–µ–∂–∏–º–µ! –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Å—å –≤ EFI!(ansi reset)"
        exit 1
    }

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ mkpasswd, –µ—Å–ª–∏ –Ω–µ—Ç - —Å—Ç–∞–≤–∏–º
    if (which mkpasswd | is-empty) {
        print "üì¶ –°—Ç–∞–≤–ª—é mkpasswd..."
        nix-env -iA nixos.mkpasswd
    }

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç
    if (do --ignore-errors { ping -c 1 google.com } | complete).exit_code != 0 {
        setup_wifi
    }

    print $"(ansi yellow)üì° –°–µ—Ç—å –Ω–∞ –º–µ—Å—Ç–µ, –ø–æ–≥–Ω–∞–ª–∏ –¥–∞–ª—å—à–µ!(ansi reset)"

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –¥–∏—Å–∫
    let disk = select_disk

    print $"(ansi yellow)üíæ –ë—É–¥–µ–º —Ä–∞–∑–±–∏–≤–∞—Ç—å –¥–∏—Å–∫: ($disk)(ansi reset)"
    if (input "–¢–æ—á–Ω–æ –µ–≥–æ —Ä–∞–∑–±–∏–≤–∞–µ–º? [y/N] ") != "y" {
        print "–ù—É –Ω–µ—Ç —Ç–∞–∫ –Ω–µ—Ç, –¥–∞–≤–∞–π –ø–æ –Ω–æ–≤–æ–π!"
        exit 1
    }

    # –†–∞–∑–º–µ—á–∞–µ–º –¥–∏—Å–∫–∏
    partition_disk $disk

    # –ö–∞—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
    print $"(ansi green)üîÑ –©–∞ –∫–æ–Ω—Ñ–∏–≥ –ø–æ–¥—Ç—è–Ω—É...(ansi reset)"

    # –°–Ω–∞—á–∞–ª–∞ –∫–ª–æ–Ω–∏–º –≤ –¥–æ–º–∞—à–Ω—é—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    ^mkdir -p /mnt/home/decard/nix
    git clone https://github.com/decard2/nix.git /mnt/home/decard/nix

    # –ü–æ—Ç–æ–º –¥–µ–ª–∞–µ–º —Å–∏–º–ª–∏–Ω–∫ –≤ /etc/nixos
    ^mkdir -p /mnt/etc
    ln -s /home/decard/nix /mnt/etc/nixos

    # –ì–µ–Ω–µ—Ä–∏–º –∫–æ–Ω—Ñ–∏–≥–∏
    print $"(ansi green)üîß –ì–µ–Ω–µ—Ä—é hardware-configuration.nix...(ansi reset)"
    nixos-generate-config --root /mnt --no-filesystems

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥–∏ –¥–ª—è systemd-boot
    print $"(ansi green)üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥–∏ –¥–ª—è systemd-boot...(ansi reset)"
    nixos-generate-config --root /mnt

    # –¢–µ–ø–µ—Ä—å –∫–æ–ø–∏—Ä—É–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    cp /mnt/etc/nixos/hardware-configuration.nix /mnt/home/decard/nix/hosts/emerald/hardware.nix

    # –ó–∞–¥–∞—ë–º –ø–∞—Ä–æ–ª—å —Ä—É—Ç–∞
    print $"(ansi yellow)üîë –ë—Ä–∞—Ç–∏—à, –¥–∞–≤–∞–π –ø–∞—Ä–æ–ª—å —Ä—É—Ç–∞ –∑–∞–¥–∞–¥–∏–º!(ansi reset)"
    while true {
        let passwd = input --password "–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å –¥–ª—è root: "
        let passwd2 = input --password "–ò –µ—â—ë —Ä–∞–∑–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: "
        if $passwd == $passwd2 {
            $passwd | mkpasswd -m sha-512 | save -f /mnt/etc/shadow.root
            break
        }
        print $"(ansi red)‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –¥–∞–≤–∞–π –ø–æ –Ω–æ–≤–æ–π!(ansi reset)"
    }

    # –ò –¥–ª—è —Ç–≤–æ–µ–≥–æ —é–∑–µ—Ä–∞
    print $"(ansi yellow)üîë –¢–µ–ø–µ—Ä—å –ø–∞—Ä–æ–ª—å –¥–ª—è decard!(ansi reset)"
    while true {
        let passwd = input --password "–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å –¥–ª—è decard: "
        let passwd2 = input --password "–ò –µ—â—ë —Ä–∞–∑–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: "
        if $passwd == $passwd2 {
            $passwd | mkpasswd -m sha-512 | save -f /mnt/etc/shadow.user
            break
        }
        print $"(ansi red)‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –¥–∞–≤–∞–π –ø–æ –Ω–æ–≤–æ–π!(ansi reset)"
    }

    # –ü–æ–≥–Ω–∞–ª–∏ —Å—Ç–∞–≤–∏—Ç—å!
    print $"(ansi green_bold)üöÄ –ù—É —á—ë, –ø–æ–≥–Ω–∞–ª–∏ —Å—Ç–∞–≤–∏—Ç—å —ç—Ç—É –∫—Ä–∞—Å–æ—Ç—É?(ansi reset)"
    if (input "–ù–∞—á–∏–Ω–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É? [y/N] ") == "y" {
        nixos-install --flake /mnt/etc/nixos#emerald --root-passwd-file /mnt/etc/shadow.root --passwd-file /mnt/etc/shadow.user
    }
}

def setup_wifi [] {
    print $"(ansi yellow)üò± –í–æ—Ç –∂–µ–∂, –∏–Ω–µ—Ç–∞ –Ω–µ—Ç! –©–∞—Å –ø–æ—Ä–µ—à–∞–µ–º...(ansi reset)"

    # –ó–∞–ø—É—Å–∫–∞–µ–º iwctl –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ
    print "–©–∞ iwctl –∑–∞–ø—É—â—É, —Ç–∞–º —Å–¥–µ–ª–∞–π:"
    print "1. station wlan0 scan"
    print "2. station wlan0 get-networks"
    print "3. station wlan0 connect \"–ò–º—è_–°–µ—Ç–∏\""
    print "4. exit"

    iwctl

    if (do --ignore-errors { ping -c 1 google.com } | complete).exit_code != 0 {
        print $"(ansi red)‚ùå –ù–µ, –±—Ä–∞—Ç–∞–Ω, –∏–Ω–µ—Ç —Ç–∞–∫ –∏ –Ω–µ –ø–æ—è–≤–∏–ª—Å—è...(ansi reset)"
        exit 1
    }
}

def select_disk [] {
    print $"(ansi yellow)üíΩ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∏—Å–∫–∏:(ansi reset)"
    let disks = (lsblk -dpno NAME,SIZE | lines | each { |it| $it | str trim })

    for disk in $disks {
        print $"  ($disk)"
    }

    let selected = input "–ù–∞ –∫–∞–∫–æ–π –¥–∏—Å–∫ —Å—Ç–∞–≤–∏–º? (–ø–æ–ª–Ω—ã–π –ø—É—Ç—å, —Ç–∏–ø–∞ /dev/sda): "
    if ($selected | path exists) {
        $selected
    } else {
        print $"(ansi red)‚ùå –ù–µ, —Ç–∞–∫–æ–≥–æ –¥–∏—Å–∫–∞ –Ω–µ—Ç!(ansi reset)"
        exit 1
    }
}

def partition_disk [disk: string] {
    print $"(ansi yellow)üî™ –†–∞–∑–º–µ—á–∞–µ–º –¥–∏—Å–∫: ($disk)(ansi reset)"

    # –ü–∞—Ä—Å–∏–º RAM –¥–ª—è —Å–≤–æ–ø–∞
    let ram = (free -g | lines | $in.1 | split row -r '\s+' | $in.1 | into int)
    let swap_size = ($ram * 2)

    # –ß–∏—Å—Ç–∏–º –¥–∏—Å–∫ –Ω–∞ –≤—Å—è–∫–∏–π
    wipefs -af $disk

    # –†–∞–∑–º–µ—á–∞–µ–º
    parted $disk -- mklabel gpt
    parted $disk -- mkpart ESP fat32 1MiB 1GiB
    parted $disk -- set 1 esp on
    parted $disk -- mkpart primary linux-swap 1GiB $"($swap_size + 1)GiB"
    parted $disk -- mkpart primary $"($swap_size + 1)GiB" 100%

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞–∑–¥–µ–ª—ã
    print "–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º EFI —Ä–∞–∑–¥–µ–ª..."
    mkfs.fat -F 32 -n "EFI" $"($disk)1"

    print "–°–æ–∑–¥–∞—ë–º SWAP..."
    mkswap -L "swap" $"($disk)2"

    print "–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º BTRFS —Ä–∞–∑–¥–µ–ª..."
    mkfs.btrfs -L "nixos" $"($disk)3"

    # –ú–æ–Ω—Ç–∏—Ä—É–µ–º BTRFS –∏ —Å–æ–∑–¥–∞—ë–º —Å–∞–±–≤–æ–ª—é–º—ã
    print "–°–æ–∑–¥–∞—ë–º —Å–∞–±–≤–æ–ª—é–º—ã..."
    mount $"($disk)3" /mnt

    # –°–æ–∑–¥–∞—ë–º —Å–∞–±–≤–æ–ª—é–º—ã
    btrfs subvolume create /mnt/@
    btrfs subvolume create /mnt/@home
    btrfs subvolume create /mnt/@nix
    btrfs subvolume create /mnt/@cache
    btrfs subvolume create /mnt/@log

    # –û—Ç–º–æ–Ω—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–æ—á–∫—É
    umount /mnt

    # –ú–æ–Ω—Ç–∏—Ä—É–µ–º –≤—Å—ë –∫–∞–∫ –Ω–∞–¥–æ
    print "–ú–æ–Ω—Ç–∏—Ä—É–µ–º —Ä–∞–∑–¥–µ–ª—ã..."
    mount -o subvol=@,compress=zstd,noatime $"($disk)3" /mnt

    ^mkdir -p /mnt/{home,nix,boot/efi,var/cache,var/log}

    mount -o subvol=@home,compress=zstd,noatime $"($disk)3" /mnt/home
    mount -o subvol=@nix,compress=zstd,noatime $"($disk)3" /mnt/nix
    mount -o subvol=@cache,compress=zstd,noatime $"($disk)3" /mnt/var/cache
    mount -o subvol=@log,compress=zstd,noatime $"($disk)3" /mnt/var/log
    mount $"($disk)1" /mnt/boot/efi
    swapon $"($disk)2"

    print $"(ansi green)‚úÖ –î–∏—Å–∫ —Ä–∞–∑–º–µ—á–µ–Ω –∏ –ø—Ä–∏–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω!(ansi reset)"
}

main
